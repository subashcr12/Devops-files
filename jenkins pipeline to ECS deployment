pipeline {
    agent any
    environment {
        app             = "YOUR_APP"
        service         = "YOUR_SERVICE"
        region          = "YOUR_REGION"
        aws_account_id  = "YOUR_AWS_ACCOUNT_ID"
        repo_name       = "YOUR_REPO_NAME"
        cluster_name    = "YOUR_CLUSTER_NAME"
        task_def_name   = "YOUR_TASK_DEF_NAME"
    }
    stages {
        stage('SonarQube Analysis') {
            steps {
                script {
                    sh "mvn clean verify sonar:sonar -Dsonar.projectKey=YOUR_SONAR_PROJECT_KEY -Dsonar.projectName='YOUR_SONAR_PROJECT_NAME' -Dsonar.host.url=YOUR_SONAR_SERVER -Dsonar.token=YOUR_SONAR_TOKEN"
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    sh "docker build --build-arg ENV_PROFILE=${environment} -t ${repo_name}:latest ."
                }
            }
        }
        stage('Deploy To ECR') {
            steps {
                script {
                    withAWS(credentials: "aws-${app}-${environment}", region: "${region}") {
                        sh """
                            aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${aws_account_id}.dkr.ecr.${region}.amazonaws.com
                            docker tag ${repo_name}:latest ${aws_account_id}.dkr.ecr.${region}.amazonaws.com/${repo_name}:${BUILD_NUMBER}
                            docker push ${aws_account_id}.dkr.ecr.${region}.amazonaws.com/${repo_name}:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }
        stage('Deploy To ECS') {
            steps {
                script {
                    withAWS(credentials: "aws-${app}-${environment}", region: "${region}") {
                        sh """
                            TASK_DEFINITION=$( aws ecs describe-task-definition --task-definition ${task_def_name} --region=${region} )
                            NEW_TASK_DEFINITION=$( echo $TASK_DEFINITION | jq --arg IMAGE "${aws_account_id}.dkr.ecr.${region}.amazonaws.com/${repo_name}:${BUILD_NUMBER}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' )
                            echo $NEW_TASK_DEFINITION > task-def.json
                            NEW_TASK_INFO=$(aws ecs register-task-definition --region ${region} --cli-input-json file://task-def.json)
                            NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
                            aws ecs update-service --cluster ${cluster_name} --service ${service} --task-definition ${task_def_name}:${NEW_REVISION} --force-new-deployment
                        """
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                sh 'rm -rf task-def.json || echo "already cleaned up"'
                sh 'docker system prune -f'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
